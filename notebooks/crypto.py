from random import randrange
from typing import List, Tuple

# A handy list of small primes
SMALL_PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\
 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]

def isWitness(a: int, n: int, q: int, k: int) -> bool:
    x = pow(a, q, n)
    if x==1:
        return False
    for _ in range(k):
        if (x+1)%n == 0:
            return False
        x = pow(x, 2, n)
    return True


def isPrime(n: int, r: int) -> bool:
    # Miller-Rabin primality testing.
    # n: number to test primality
    # r: times to run the test
    if n<2:
        return False
    if n==2:
        return True
    if n%2==0:
        return False
    
    q = n-1
    k = 0
    while q%2 == 0:
        q = q//2
        k += 1
    
    for _ in range(r):
        a = randrange(2, n)
        if isWitness(a, n, q, k):
            return False
    return True

def RandomPrime(size: int=256, m: int=40) -> int:
    """
    Returns a random prime number of size bits
    Use Miller-Rabin algorithm to check primality
    Inputs:
        size: the size in bits of the desired prime
        m: number of times to run Miller-Rabin primality
           check.
    Outputs:
        p: a random prime of the expected size
    """
    while True:
        p = randrange(2**(size-1), 2**(size))
        if isPrime(p, m):
            return p


def PrimesSieveEratosthenes(limit: int):
    """
    Calculate list of primes until an integer "limit"
    https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes
    The function is a generator, so you have to cast it
    to a list if you want a full list of all the primes.
    Input:
        limit: an max integer up to where we want to
               calculate prime numbers
    Output:
        A generator of prime numbers up until limit.
    e.g. Calculate primes up to 100
    n = 100
    primes = list(primes_sieve_eratosthenes(n))
    print("All prime numbers bellow {} are:\n{}".format(n,primes))
    e.g.2 (bits) Calculate all prime numbers smaller than 2^16
    n = 1 << 16
    primes = list(primes_sieve_eratosthenes(n))
    print("All prime numbers bellow {} are:\n{}".format(n,primes))
    """
    a = [True] * limit                          
    a[0] = a[1] = False
    for i, isprime in enumerate(a):
        if isprime:
            yield i
            for n in range(i*i, limit, i):
                a[n] = False


def InverseFermat(a: int, p: int) -> int:
    """
    Given a natural number "a" over a field generated by "p", the function
    generates "ai" the inverse of "a", this is ai*a(mod p)=1.
    ALGORITHM: Using Fermat's little theorem. If p is prime then a^{p-1}(mod p)=1
    so the inverse of a is got by multiplying both sides by a^{-1}, therefore:
    a^{-1}=a^{p-2} (mod p). The inverse is then a^{p-2}(mod p)
    Input: 
        a: an integer number smaller than p
        p: a prime number
    Output:
        a^{-1}: The inverse of a
    e.g.
    p = 17
    a = 10
    print("Inverse modulo of {} with p={} is {}. a*a^-1={}".format(a, p, InverseFermat(a,p), a*InverseFermat(a,p)%p))
    """
    # p has to be a prime number
    if not isPrime(p, 40):
        raise ValueError(f"{p} is not prime number, cannot calculate inverse using Fermat's theorem")

    if a>p:
        raise ValueError(f"a={a} cannot be larger than p={p}, the element is not in the group, try input a%p instead")

    return pow(a, p-2, p)

def _FindSafePrimes(size: int=256, krange: int=500):
    """
    Function that finds two primes p and q related by
    p = kq +1, so order(p)=p-1=kq
    it is used to factor p-1 number
    input:
        size: size of the prime numbers
    output: 
        the triplet (p, q, k) following the equation
        p = kq + 1
            p: prime number
            q: prime number
            k: factorisation
    """
    # Start with non prime numbers
    while True:
        p = RandomPrime(size, 100)
        for k in range(2, krange):
            # p-1=kq, check if p-1 is divisible by q
            q = (p-1)//k
            if (p-1)%k==0 and isPrime(q, 100):
                # if divisible, assign q = (p-1)/k
                # we've found the values
                return p, q, k


def BruteForceFactorisation(n: int, primes: List[int]=SMALL_PRIMES):
    """
    Finds the list of factors of n using a set of prime numbers. And also
    the number of times each number has to be multiplied.
    Input;
        n: a composite integer (not prime)
        primes: a list of candiate primes to factorise n
    Output:
        a tuple, (factors, reps)
        factors: the prime numbers that factor n
        reps: the repetitions of those prime numbers
    ##calculate back n:
    n = 1
    for factor, rep in zip(factors, reps):
        n*=factor**rep
    print(f"Recovered n from factors and reps {n}")
    WARNING: if n is too large compared to the list of primes we may not be
    able to factor n. You can then increase the list of primes by inputing
    as parameter list(primes_sieve_eratosthenes(1<<16)).
    We have assured convergence if primes[-1]>n
    """
    if isPrime(n, 40):
        return [n], [1]
    factors = []
    reps = []
    for prime in primes:
        #cannot factor further
        if prime>n: 
            break
        if n%prime == 0:
            factors.append(prime)
            reps.append(0)
            while n%prime == 0:
                n //= prime
                reps[-1]+=1
    assert n==1, "Cannot factor, primes list is too short"
    return factors, reps


def GeneratePrimeGeneratorPair(size: int=256):
    """
    Generates a random prime number p and a
    random generator g for the field Fp.
    Input: 
        size: Size in bits of the random prime p
    Output:
        tuple (p, g)
        p is prime number of specified size
        g is generator for the field Fp
    """

    #find primes p, q such that p = kq + 1
    p, q, k = _FindSafePrimes(size)
    assert (p-1)==k*q, "FindSafePrimes is not well implemented"
    #p, q, k = 38327, 19163, 2

    order = p-1
    # order of p is p-1. Has factorisation k*q
    # but k is composed (smaller than krange in FindSafePrimes,
    # we have to find its prime factors 
    factors, reps = BruteForceFactorisation(k)

    #add q as a factor of p-1
    factors+=[q]
    reps+=[1]

    # A value 1 < g < p will be a generator to a prime p iff
    # for every prime factor q of p-1 (the order) we have
    # b = g^((p-1)/q) != 1 (mod p)
    #
    # ALGORITHM IN BOOK: A Computational Introduction to Number Theory
    # and Algebra by Shoup. Page 269.
    while True:
        g = randrange(1, p)
        Found = True
        for factor, rep in zip(factors, reps):
            b = pow(g, order*InverseFermat(factor, p)%p, p)
            if b==1:
                Found = False
                break
        if Found:
            return p, g